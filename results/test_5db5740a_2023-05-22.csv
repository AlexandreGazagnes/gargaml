mean_fit_time,std_fit_time,param_estimator,param_scaler,params,rank_val_score,grid,best_estimator_,datetime,token,cell,model_id,y_log,get_dummies,mean_val_score,std_val_score,mean_train_score,std_train_score,run,exp,date
1.6292,0.0604,RandomForestRegressor(),QuantileTransformer(n_quantiles=100),"{'estimator': RandomForestRegressor(), 'scaler': QuantileTransformer(n_quantiles=100)}",1.0,"GridSearchCV(cv=5,
             estimator=Pipeline(steps=[('imputer', KNNImputer()),
                                       ('scaler', StandardScaler()),
                                       ('estimator',
                                        RandomForestClassifier())]),
             n_jobs=1,
             param_grid={'estimator': [RandomForestRegressor(),
                                       LinearRegression()],
                         'scaler': [StandardScaler(),
                                    QuantileTransformer(n_quantiles=100),
                                    Normalizer(), 'passthrough']},
             return_train_score=True, verbose=2)","Pipeline(steps=[('imputer', KNNImputer()),
                ('scaler', QuantileTransformer(n_quantiles=100)),
                ('estimator', RandomForestRegressor())])",2023-05-22 10:50:05,3c3b7f39,,9eec3490,1,0,0.5182,0.1029,0.9507,0.0057,0f12be9a,268c1b01,2023-05-22 10:48:13
0.1774,0.0267,LinearRegression(),StandardScaler(),"{'estimator': LinearRegression(), 'scaler': StandardScaler()}",2.0,"GridSearchCV(cv=5,
             estimator=Pipeline(steps=[('imputer', KNNImputer()),
                                       ('scaler', StandardScaler()),
                                       ('estimator',
                                        RandomForestClassifier())]),
             n_jobs=1,
             param_grid={'estimator': [RandomForestRegressor(),
                                       LinearRegression()],
                         'scaler': [StandardScaler(),
                                    QuantileTransformer(n_quantiles=100),
                                    Normalizer(), 'passthrough']},
             return_train_score=True, verbose=2)","Pipeline(steps=[('imputer', KNNImputer()), ('scaler', 'passthrough'),
                ('estimator', LinearRegression())])",2023-05-22 10:49:17,410a5a99,,e4ca8694,0,0,0.3131,0.3371,0.7362,0.1076,0f12be9a,268c1b01,2023-05-22 10:48:13
